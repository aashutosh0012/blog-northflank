[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2023-02-15T18:03:40.437Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Python", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2023-02-15T18:03:49.811Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2023-02-15T18:03:56.527Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Linux", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2023-02-15T18:04:02.986Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Database", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2023-02-15T18:04:44.724Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "NGINX", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2023-02-15T20:33:24.186Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "Bash", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2023-02-15T20:33:30.442Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Scripting", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2023-02-15T20:33:35.973Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "PowerShell", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2023-02-15T20:33:48.997Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Database", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2023-02-15T20:34:00.226Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Administration", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2023-02-15T20:34:05.315Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "REST", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2023-02-15T20:34:13.077Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "API", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2023-02-15T20:34:18.016Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Automation", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2023-02-15T20:34:21.103Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "Oracle", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2023-02-15T20:34:25.598Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "SQL Server", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2023-02-15T20:34:31.124Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "MySQL", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2023-02-15T20:34:35.728Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Postgres", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2023-02-15T20:34:37.949Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "SQL", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2023-02-15T20:34:59.084Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "Docker", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2023-02-15T20:35:05.645Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Cloud", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2023-02-15T20:35:14.234Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Github-Actions", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2023-02-15T20:35:20.894Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "AWS", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2023-02-15T20:35:25.016Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "Lambda", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2023-02-15T20:35:32.238Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "Heroku", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2023-02-15T20:35:37.136Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "fly", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2023-02-15T20:35:40.709Z", "user": 1, "content_type": 7, "object_id": "26", "object_repr": "flyctl", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2023-02-15T20:35:47.046Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "fly.io", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2023-02-15T20:35:59.053Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Jira", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2023-02-15T20:36:12.368Z", "user": 1, "content_type": 7, "object_id": "29", "object_repr": "Jira", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2023-02-15T20:36:33.796Z", "user": 1, "content_type": 7, "object_id": "29", "object_repr": "Jira", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2023-02-15T23:07:47.237Z", "user": 1, "content_type": 7, "object_id": "30", "object_repr": "Twitter", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2023-02-16T00:03:33.310Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Test title", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2023-02-16T00:04:18.117Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Test", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2023-02-16T08:20:44.906Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Test", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2023-02-16T08:20:44.947Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "Test title", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2023-02-16T13:54:50.380Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "PostgreSQL Database : Index-Only Scans", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2023-02-16T13:57:10.011Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "PostgreSQL Database : Index-Only Scans", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Tag\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2023-02-17T09:06:32.325Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "Rests", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2023-02-17T09:06:32.362Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "Tst", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2023-02-17T18:10:26.971Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Database", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2023-02-17T18:17:08.126Z", "user": 1, "content_type": 7, "object_id": "26", "object_repr": "flyctl", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2023-02-17T18:17:08.173Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "fly", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2023-03-04T13:38:54.557Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Jira Development & Administration", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\", \"Cover image url\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2023-03-04T13:40:32.766Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "Jira Development & Administration", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add tag", "content_type": 7, "codename": "add_tag"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change tag", "content_type": 7, "codename": "change_tag"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete tag", "content_type": 7, "codename": "delete_tag"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view tag", "content_type": 7, "codename": "view_tag"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add post", "content_type": 8, "codename": "add_post"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change post", "content_type": 8, "codename": "change_post"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete post", "content_type": 8, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view post", "content_type": 8, "codename": "view_post"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$390000$38zvelPoMwbZ9SMneAQQb2$L3dIQj8ExYGy9KL3vMx9dcy5jEe77EffcwYNV/QzTdM=", "last_login": "2023-03-04T13:35:08.951Z", "is_superuser": true, "username": "aashutosh", "first_name": "", "last_name": "", "email": "aashutosh0012@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2023-02-10T17:28:33.376Z", "groups": [], "user_permissions": []}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "blog", "model": "tag"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "blog", "model": "post"}}, {"model": "sessions.session", "pk": "7crlr67ngu2ehd5rmeiex65a18ajq43t", "fields": {"session_data": ".eJxVjEEOgjAQRe_StWmYtoMdl-45QzPDtIIaSCisjHdXEha6_e-9_zKJt3VIW81LGtVcDJjT7ybcP_K0A73zdJttP0_rMordFXvQartZ8_N6uH8HA9fhW7tMkSVgUAmtp1KoKYKKSu2ZXIOuAPnYMpaIrDGCE4XigUIvoODN-wPb_DeG:1pQZYm:v_iDuB_0wafpsvGq2VxNqcX81yTurR_Yqm0sMMHnlsk", "expire_date": "2023-02-24T19:59:52.531Z"}}, {"model": "sessions.session", "pk": "cab1ucyta0hm82tyjfo30fij98ioyeqk", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pRJUa:gH7dCnhwSf-FgMavYStsLl_LXbYqx-70YmbNbV2HAsc", "expire_date": "2023-02-26T21:02:36.019Z"}}, {"model": "sessions.session", "pk": "d0c0y6o7wkgfvu6i228tjuo0nsnf9s1p", "fields": {"session_data": ".eJxVjEEOgjAQRe_StWmYtoMdl-45QzPDtIIaSCisjHdXEha6_e-9_zKJt3VIW81LGtVcDJjT7ybcP_K0A73zdJttP0_rMordFXvQartZ8_N6uH8HA9fhW7tMkSVgUAmtp1KoKYKKSu2ZXIOuAPnYMpaIrDGCE4XigUIvoODN-wPb_DeG:1pSN2o:uXVSKJ8u6ZyfgGNor4K7J9nMu_Ldn59eLfHsX7mqShk", "expire_date": "2023-03-01T19:02:18.443Z"}}, {"model": "sessions.session", "pk": "k7nadjpwozq7uoyflj3rdmf3m0c66yeb", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pRJyc:bX0WqLpmhyay8xV-77QX6X6yiN_869vzxSl-54RosA4", "expire_date": "2023-02-26T21:33:38.475Z"}}, {"model": "sessions.session", "pk": "ln7rf4qs3ehj3opugmj5lgkc5eqgwraz", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pSRdn:2LQWagEKBNlj7V1PkYo1G3CYsri7hqFcc-6aAXzH2p8", "expire_date": "2023-03-01T23:56:47.070Z"}}, {"model": "sessions.session", "pk": "m5qvp089avp51byfdz8vaamgw4hcuwxg", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pSRif:xO4_gDhWuI2tfky0E1-eqLghLKj8SSLu5cGV1itbExA", "expire_date": "2023-03-02T00:01:49.400Z"}}, {"model": "sessions.session", "pk": "mt5yp7diboypofv2bxe1uy3dsiun4obq", "fields": {"session_data": ".eJxVjEEOgjAQRe_StWmYtoMdl-45QzPDtIIaSCisjHdXEha6_e-9_zKJt3VIW81LGtVcDJjT7ybcP_K0A73zdJttP0_rMordFXvQartZ8_N6uH8HA9fhW7tMkSVgUAmtp1KoKYKKSu2ZXIOuAPnYMpaIrDGCE4XigUIvoODN-wPb_DeG:1pT86R:zjpbTQKzzegNz6ppqfb3ooDSEEZI_FWVXh6cZyBX7GU", "expire_date": "2023-03-03T21:17:11.659Z"}}, {"model": "sessions.session", "pk": "pfkxl1qgjx86qhw46yfgrujx9ibj7twg", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pQXc9:rxZUvnYCKldFx8tf1TsYMbRMyJPKXVw8QBRSY0xVPDs", "expire_date": "2023-02-24T17:55:13.966Z"}}, {"model": "sessions.session", "pk": "rezkqxim5p6udbtkekyyp9vszbxx4fqu", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pQXcA:crN8QyInRHMnogy1Phv8EBJlzP2kgreQYpyFMuXmCwU", "expire_date": "2023-02-24T17:55:14.674Z"}}, {"model": "sessions.session", "pk": "rk4hrym62oyurlp0t33qbdvy2yyux1db", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pYS2W:Dx6u1khROFGXXE_xMUMJpPms__89jXoyjMGpG7F2dAE", "expire_date": "2023-03-18T13:35:08.989Z"}}, {"model": "sessions.session", "pk": "txmyrr26hpl1cvqtxz0kwsb2kk3xmif2", "fields": {"session_data": ".eJxVjDsOwjAUBO_iGlnxJ3ZCSc8ZrGe_NQ4gW8qnQtwdIqWAdmdmXyLQtpawLZjDxOIslDj9bpHSA3UHfKd6azK1us5TlLsiD7rIa2M8L4f7d1BoKd8a0F477ntvle7UEE2yyrHjOKaMIWujQV1K5AgAezbcG3DMgNOjteL9AfCpOPE:1pSRig:JjDxLso-f-fQDWjL6FDFPCvFyi525txWZFBYJ3O9CTM", "expire_date": "2023-03-02T00:01:50.121Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"name": "Python"}}, {"model": "blog.tag", "pk": 2, "fields": {"name": "Django"}}, {"model": "blog.tag", "pk": 3, "fields": {"name": "Linux"}}, {"model": "blog.tag", "pk": 4, "fields": {"name": "Database"}}, {"model": "blog.tag", "pk": 5, "fields": {"name": "NGINX"}}, {"model": "blog.tag", "pk": 6, "fields": {"name": "Bash"}}, {"model": "blog.tag", "pk": 7, "fields": {"name": "Scripting"}}, {"model": "blog.tag", "pk": 8, "fields": {"name": "PowerShell"}}, {"model": "blog.tag", "pk": 10, "fields": {"name": "Administration"}}, {"model": "blog.tag", "pk": 11, "fields": {"name": "REST"}}, {"model": "blog.tag", "pk": 12, "fields": {"name": "API"}}, {"model": "blog.tag", "pk": 13, "fields": {"name": "Automation"}}, {"model": "blog.tag", "pk": 14, "fields": {"name": "Oracle"}}, {"model": "blog.tag", "pk": 15, "fields": {"name": "SQL Server"}}, {"model": "blog.tag", "pk": 16, "fields": {"name": "MySQL"}}, {"model": "blog.tag", "pk": 17, "fields": {"name": "Postgres"}}, {"model": "blog.tag", "pk": 18, "fields": {"name": "SQL"}}, {"model": "blog.tag", "pk": 19, "fields": {"name": "Docker"}}, {"model": "blog.tag", "pk": 20, "fields": {"name": "Cloud"}}, {"model": "blog.tag", "pk": 21, "fields": {"name": "Github-Actions"}}, {"model": "blog.tag", "pk": 22, "fields": {"name": "AWS"}}, {"model": "blog.tag", "pk": 23, "fields": {"name": "Lambda"}}, {"model": "blog.tag", "pk": 24, "fields": {"name": "Heroku"}}, {"model": "blog.tag", "pk": 27, "fields": {"name": "fly.io"}}, {"model": "blog.tag", "pk": 28, "fields": {"name": "Jira"}}, {"model": "blog.tag", "pk": 30, "fields": {"name": "Twitter"}}, {"model": "blog.post", "pk": 1, "fields": {"title": "PostgreSQL Database : Index-Only Scans", "slug": "postgresql-database-index-only-scans", "author": 1, "summary": "Index only scan, makes query execution faster, by accessing table row entry from index only, without accessing the actual table.", "body": "<p>All indexes in PostgreSQL are secondary indexes, meaning that each index is stored separately from the table&#39;s main data area (which is called the table&#39;s heap in PostgreSQL terminology). This means that in an ordinary index scan, each row retrieval requires fetching data from both the index and the heap.&nbsp;Furthermore, while the index entries that match a given indexable WHERE condition are usually close together in the index, the table rows they reference might be anywhere in the heap. The heapaccess portion of an index scan thus involves a lot of random access into the heap, which can be slow, particularly on traditional rotating media.</p>\r\n\r\n<p>To solve this performance problem, PostgreSQL supports index-only scans, which can answer queries from an index alone without any heap access. The basic idea is to return values directly out of each index entry instead of consulting the associated heap entry. There are two fundamental restrictions on when this method can be used:</p>\r\n\r\n<ol>\r\n\t<li>The index type must support index-only scans. B-tree indexes always do. GiST and SP-GiST indexes support index-only scans for some operator classes but not others. Other index types have no support. The underlying requirement is that the index must physically store, or else be able to reconstruct, the original data value for each index entry. As a counterexample, GIN indexes cannot support index-only scans because each index entry typically holds only part of the original data value.</li>\r\n\t<li>The query must reference only columns stored in the index.<br />\r\n\tFor example, given an index on columns x and y of a table that also has a column z, these queries could use index-only scans:</li>\r\n</ol>\r\n\r\n<p><code>SELECT x, y FROM tab WHERE x = &#39;key&#39;;<br />\r\nSELECT x FROM tab WHERE x = &#39;key&#39; AND y &lt; 42;</code></p>\r\n\r\n<p>&nbsp;but these queries could not:</p>\r\n\r\n<p><code>SELECT x, z FROM tab WHERE x = &#39;key&#39;;<br />\r\nSELECT x FROM tab WHERE x = &#39;key&#39; AND z &lt; 42;</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>If these two fundamental requirements are met, then all the data values required by the query are available from the index, so an index-only scan is physically possible. But there is an additional requirement for any table scan in PostgreSQL: it must verify that each retrieved row be &ldquo;visible&rdquo; to the query&#39;s MVCC snapshot. Visibility information is not stored in index entries, only in heap entries; so at first glance it would seem that every row retrieval would require a heap access anyway. And this is indeed the case, if the table row has been modified recently. However, for seldom-changing data there is a way around this problem. PostgreSQL tracks, for each page in a table&#39;s heap, whether all rows stored in that page are old enough to be visible to all current and future transactions. This information is stored in a bit in the table&#39;s visibility map. An index-only scan, after finding a candidate index entry, checks the visibility map bit for the corresponding heap page. If it&#39;s set, the row is known visible and so the data can be returned with no further work. If it&#39;s not set, the heap entry must be visited to find out whether it&#39;s visible, so no performance advantage is gained over a standard index scan. Even in the successful case, this approach trades visibility map accesses for heap accesses; but since the visibility map is four orders of magnitude smaller than the heap it describes, far less physical I/O is needed to access it. In most situations the visibility map remains cached in memory all the time. In short, while an index-only scan is possible given the two fundamental requirements, it will be a win only if a significant fraction of the table&#39;s heap pages have their all-visible map bits set. But tables in which a large fraction of the rows are unchanging are common enough to make this type of scan very useful in practice.</p>", "created": "2023-02-12T21:03:08.934Z", "updated": "2023-02-15T22:48:07Z", "is_approved": true, "cover_image_url": "https://audviklabs.in/wp-content/uploads/2022/01/postgreSQL.png", "cover_image_file": "/static/images/random/rotating-stars.jpg", "tag": [17, 4], "likes": []}}, {"model": "blog.post", "pk": 2, "fields": {"title": "Use Nginx as a reverse proxy and load balancer for multiple applications/websites", "slug": "nginx-as-a-reverse-proxy-and-load-balancer-for-mul", "author": 1, "summary": "Load balance & Reverse proxy multiple applications hosted on different resources using a single NGINX server.", "body": "<h3>Configure Nginx for Jira server</h3>\r\n\r\n<p>Create a new Nginx configuration file in the&nbsp;<strong><code>/etc/nginx/sites-available</code></strong>&nbsp;directory, for example&nbsp;<strong><code>jira.conf</code></strong>, and add the following configuration:</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">&nbsp;<code>upstream jira {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.1.10:8080;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.1.11:8080;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.1.12:8080;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.1.13:8080;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;server {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;listen 80;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server_name jira.example.com;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;location / {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_pass http://jira;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_set_header Host $host;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_set_header X-Real-IP $remote_addr;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;}</code></div>\r\n\r\n<p>This configuration uses a jira upstream block to define a group of Jira servers, 192.168.1.10:8080, 192.168.1.11:8080, 192.168.1.12:8080, and 192.168.1.13:8080, that Nginx can balance traffic to. The server block tells Nginx to listen on port 80 for requests to jira.example.com, and proxy those requests to the Jira servers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Configure Nginx for Confluence server:</h3>\r\n\r\n<p>Create a new Nginx configuration file in the&nbsp;<strong><code>/etc/nginx/sites-available</code></strong>&nbsp;directory, for example&nbsp;<strong><code>confluence.conf</code></strong>, and add the following configuration:</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>upstream confluence {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.2.10:8090;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.2.11:8090;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.2.12:8090;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server 192.168.2.13:8090;<br />\r\n&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;server {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;listen 80;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;server_name confluence.example.com;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;location / {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_pass http://confluence;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_set_header Host $host;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;proxy_set_header X-Real-IP $remote_addr;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\r\n&nbsp;&nbsp; &nbsp;}</code></div>\r\n\r\n<p>This configuration uses a confluence upstream block to define a group of Confluence servers, 192.168.2.10:8090, 192.168.2.11:8090, 192.168.2.12:8090, and 192.168.2.13:8090, that Nginx can balance traffic to. The server block tells Nginx to listen on port 80 for requests to confluence.example.com, and proxy those requests to the Confluence servers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Enable the Nginx configurations:</h3>\r\n\r\n<p>Create symbolic links in the /etc/nginx/sites-enabled directory to the jira.conf and confluence.conf files:</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;$ sudo ln -s /etc/nginx/sites-available/jira.conf /etc/nginx/sites-enabled/<br />\r\n&nbsp;&nbsp; &nbsp;$ sudo ln -s /etc/nginx/sites-available/confluence.conf /etc/nginx/sites-enabled/</code></div>\r\n\r\n<p>In this configuration, Nginx will listen on port 80 for incoming requests. When it receives a request for jira.example.com, it will proxy the request to the Jira server cluster defined in the upstream block. Similarly, when it receives a request for confluence.example.com, it will proxy the request to the Confluence server cluster defined in the upstream block.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>After making the changes, restart Nginx to apply the changes:</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>$ sudo service nginx restart</code></div>", "created": "2023-02-15T18:02:34.929Z", "updated": "2023-02-17T21:30:01.778Z", "is_approved": true, "cover_image_url": "https://cdn-media-1.freecodecamp.org/images/RooSvbKlAWsOjkz8JPactXH-GPf4Pe6DC3Ue", "cover_image_file": null, "tag": [5, 3, 28], "likes": []}}, {"model": "blog.post", "pk": 3, "fields": {"title": "Linux Shortcuts, single word, everyday aliases | Send emails with one command", "slug": "linux-shortcuts-single-word-everyday-aliases-s", "author": 1, "summary": "Use aliases or shortcuts to fasten tasks and ease operations for lengthy & repeated tasks using one command", "body": "<p>Use aliases or shortcuts to fasten tasks and ease operations for lengthy &amp; repeated tasks using one command.<br />\r\nMake aliases in user home (&nbsp;<code>~/.bashrc</code>) or global (<code>/etc/bashrc</code>) file.</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>reload . ~/.bash_profile to load aliases</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><u>Shortcut to send email with attachment</u></strong></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code># Alias to send any file as email<br />\r\n# usage : $ mailme &lt;file-name&gt; [optional extra recipients&nbsp; email addresses]<br />\r\nalias mailme=&#39;/home/aashu/scripts/mailme.sh $1&#39;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Create a script, which can be called when alias mailme is called. This script will take positional arguments i.e. files to send and optional extra recipients email addresses, passed to the mailme alias.</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>cat /home/aashu/scripts/email.sh<br />\r\necho &quot;$1&quot; | mailx -a $1 -s &quot;$1&quot; -r aashutosh0012@gmail.com&nbsp;<a href=\"mailto:aashutosh0012@gmail.com\">aashutosh0012@gmail.com</a></code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><u>Most used common Examples</u></strong></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>cat .bashrc<br />\r\n<br />\r\n# Source global definitions<br />\r\nif [ -f /etc/bashrc ]; then<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . /etc/bashrc<br />\r\nfi<br />\r\n<br />\r\n#alias to list files<br />\r\nalias l=&#39;ls -ltrh&#39;<br />\r\n<br />\r\n#alias to list all files including hidden -a<br />\r\nalias la=&#39;ls -latrh&#39;<br />\r\n<br />\r\n# Oracle Database aliases<br />\r\nalias sql=&#39;sqlplus / as sysdba&#39;<br />\r\nalias ORCL1=&#39;export ORACLE_SID=ORCL1; . oraenv&#39;<br />\r\nalias ORCL2=&#39;export ORACLE_SID=ORCL2; . oraenv&#39;<br />\r\nalias ORCL3=&#39;export ORACLE_SID=ORCL3; . oraenv&#39;<br />\r\n<br />\r\n# Alias to list running oracle&#39;s pmon processes<br />\r\nalias pmon=&#39;ps -ef | grep pmon&#39;</code></div>", "created": "2023-02-15T20:32:55.319Z", "updated": "2023-02-15T20:47:44.925Z", "is_approved": true, "cover_image_url": "https://static.wixstatic.com/media/29860b_3ddc34984d484e399a9a19952d1355e6~mv2.png/v1/fit/w_1000%2Ch_630%2Cal_c/file.png", "cover_image_file": null, "tag": [3], "likes": []}}, {"model": "blog.post", "pk": 4, "fields": {"title": "Advance Cron for Jira Cloud", "slug": "advance-cron-for-jira-cloud", "author": 1, "summary": "Schedule jobs using Advanced cron expressions in Jira cloud.", "body": "<p><img alt=\"\" class=\"border border-dark img-fluid mx-5\" src=\"https://i.ibb.co/xGrpk9h/Jira-crontab.jpg\" style=\"height:643px; width:723px\" /></p>\r\n\r\n<p><strong>Constructing a cron expression</strong></p>\r\n\r\n<p>A cron expression is a string of fields separated by spaces. The following table displays the fields of a cron expression,&nbsp;<em>in the order that they must be specified (from left to right)</em>:</p>\r\n\r\n<table border=\"1\" class=\"Table\" style=\"border:solid windowtext 1px; width:660px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:101px\">&nbsp;</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:52px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Second</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:53px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Minute</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:40px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Hour</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:85px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Day-of-month</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:130px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Month</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:114px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Day-of-week</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:84px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Year (optional)</span></strong></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:101px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Allowed values</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:52px\">\r\n\t\t\t<p>0-59</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:53px\">\r\n\t\t\t<p>0-59</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:40px\">\r\n\t\t\t<p>0-23</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:85px\">\r\n\t\t\t<p>1-31</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:130px\">\r\n\t\t\t<p>1-12 or JAN-DEC</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:114px\">\r\n\t\t\t<p>1-7 or SUN-SAT</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:84px\">\r\n\t\t\t<p>1970-2099</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:101px\">\r\n\t\t\t<p><strong><span style=\"color:black\">Allowed special<br />\r\n\t\t\tcharacters&nbsp;</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:52px\">\r\n\t\t\t<p><strong>, - * /</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:53px\">\r\n\t\t\t<p><strong>, - * /</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:40px\">\r\n\t\t\t<p><strong>, - * /</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:85px\">\r\n\t\t\t<p><strong>, - * / ? L W</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:130px\">\r\n\t\t\t<p><strong>, - * /</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:114px\">\r\n\t\t\t<p><strong>, - * / ? L #</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black; width:84px\">\r\n\t\t\t<p><strong>, - * /</strong></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>0 0 10 ? * MON-FRI&nbsp;</code></div>\r\n\r\n<p>Scheduled to run 10:00:00 AM Monday to Friday every week.</p>\r\n\r\n<p><strong>Special characters</strong></p>\r\n\r\n<table border=\"1\" class=\"Table\" style=\"border:solid windowtext 1px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p><strong><span style=\"color:black\">Special character</span></strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#bfbfbf; border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p><strong><span style=\"color:black\">Usage</span></strong></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>,</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies a list of values. For example, in the&nbsp;<strong>Day-of-week</strong>&nbsp;field, &#39;MON,WED,FRI&#39; means &#39;every Monday, Wednesday, and Friday&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>-</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies a range of values. For example, in the&nbsp;<strong>Day-of-week</strong>&nbsp;field, &#39;MON-FRI&#39; means &#39;every Monday, Tuesday, Wednesday, Thursday and Friday&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>*</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies all possible values. For example, in the&nbsp;<strong>Hour</strong>&nbsp;field, &#39;*&#39; means &#39;every hour of the day&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>/</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies increments to the given value. For example, in the&nbsp;<strong>Minute</strong>&nbsp;field, &#39;0/15&#39; means &#39;every 15 minutes during the hour, starting at minute zero&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies no particular value. This is useful when you need to specify a value for one of the two fields&nbsp;<strong>Day-of-month</strong>&nbsp;or&nbsp;<strong>Day-of-week,</strong>&nbsp;but not the other.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>L</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies the last possible value; this has different meanings depending on context. In the&nbsp;<strong>Day-of-week</strong>&nbsp;field, &#39;L&#39; on its own means &#39;the last day of every week&#39; (i.e. &#39;every Saturday&#39;), or if used after another value, means &#39;the last xxx day of the month&#39; (e.g. &#39;7L&#39; will mean &#39;the last Saturday of the month&#39;). In the&nbsp;<strong>Day-of-month</strong>&nbsp;field, &#39;L&#39; on its own means &#39;the last day of the month&#39;, or &#39;LW&#39; means &#39;the last weekday of the month&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>W</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies the weekday (Monday-Friday) nearest the given day of the month. For example, &#39;1W&#39; means &#39;the nearest weekday to the 1st of the month&#39; (note that if the 1st is a Saturday, the email will be sent on the nearest weekday&nbsp;<em>within the same month,</em>&nbsp;i.e. on Monday 3rd). &#39;W&#39; can only be used when the day-of-month is a single day, not a range or list of days.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>#</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Specifies the nth occurrence of a given day of the week. For example, &#39;TUES#2&#39; (or &#39;3#2&#39;) means &#39;the second Tuesday of the month&#39;.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Examples</strong></p>\r\n\r\n<table border=\"1\" class=\"Table\" style=\"border:solid windowtext 1px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 20 ? * *</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every day at 8:15 pm.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 * * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every day at 8:15 am.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 * 14 * * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every minute starting at 2:00 pm and ending at 2:59 pm, every day.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 0/5 14 * * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every 5 minutes starting at 2:00 pm and ending at 2:55 pm, every day.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 0/5 14,18 * * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every 5 minutes starting at 2:00 pm and ending at 2:55 pm, AND every 5 minutes starting at 6:00 pm and ending at 6:55 pm, every day.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 0-5 14 * * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every minute starting at 2:00 pm and ending at 2:05 pm, every day.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 0/10 * * * ? *</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>Every 10 minutes, forever.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 30 07 ? * 3,5</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>7:30 am every Tuesday and Thursday</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 10,44 14 ? 3 WED</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>2:10 pm and 2:44 pm every Wednesday in the month of March.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 ? * MON-FRI</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am every Monday, Tuesday, Wednesday, Thursday, and Friday.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 15 * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the 15th day of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 L * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the last day of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 LW * ?</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the last weekday of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 ? * 6L</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the last Friday of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 ? * 6#2</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the second Friday of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0 15 8 ? * 6#2 2007-2009</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>8:15 am on the second Friday of every month during the years 2007, 2008, and 2009.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>0&nbsp;0&nbsp;1&nbsp;1,15&nbsp;*&nbsp;*</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"border-bottom:1px solid black; border-left:1px solid black; border-right:1px solid black; border-top:1px solid black\">\r\n\t\t\t<p>1:00 am on the 1st and 15th day of every month.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created": "2023-02-15T20:52:15.984Z", "updated": "2023-02-15T21:23:19.811Z", "is_approved": true, "cover_image_url": "https://atlassianblog.wpengine.com/wp-content/uploads/2020/03/jiraautomation_bloghero.jpg", "cover_image_file": null, "tag": [3, 28], "likes": [1]}}, {"model": "blog.post", "pk": 5, "fields": {"title": "News Aggregator - web scraping using Python", "slug": "news-aggregator-web-scraping-using-python", "author": 1, "summary": "A Django & Python powered News Website scraper, which crawls major websites and present all news at one site, grouped categorically & source wise.", "body": "<p>This is News Aggregator, a one stop site which presents News Content from all major Tech Portals and displays them at one place without any unwanted content and distractions, free of cost.<br />\r\nUsers can create own filters, categories, add favorite source sites and much more.<br />\r\n<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Website URL :&nbsp;&nbsp;</strong><a href=\"https://all-tech-news-315116.el.r.appspot.com/\" target=\"_blank\"><strong>https://all-tech-news-315116.el.r.appspot.com/</strong></a></p>\r\n\r\n<p><strong>GitHub Repo :&nbsp;</strong><a href=\"https://github.com/aashutosh0012/all-tech-news\" target=\"_blank\"><strong>https://github.com/aashutosh0012/all-tech-news</strong></a></p>", "created": "2023-02-15T21:27:53.451Z", "updated": "2023-02-15T21:46:56.897Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/4KbRhyN/all-tech-news.png", "cover_image_file": null, "tag": [1, 2], "likes": []}}, {"model": "blog.post", "pk": 6, "fields": {"title": "Deploy Django App to Heroku", "slug": "deploy-django-app-to-heroku", "author": 1, "summary": "So, done with your Django app development, now time to deploy your project to Heroku? Follow these easy steps to deploy, host your Django app to Heroku.", "body": "<p>1.&nbsp;&nbsp; &nbsp;<a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Install Heroku CLI</a></p>\r\n\r\n<p>2.&nbsp;&nbsp; &nbsp;Clone app to Heroku</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;a.&nbsp;&nbsp; &nbsp;Login to heroku</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;This command will open a browser window to login to your heroku credentials</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ heroku login</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;b.&nbsp;&nbsp; &nbsp;Link your respository to heroku&nbsp;&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;There are several options,</p>\r\n\r\n<h6>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Option 1.</h6>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Create New app from browser or else,<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Create New app from command line</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ heroku create &lt;heroku-app-name&gt;&nbsp;&nbsp;&nbsp;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Clone heroku app source code to local</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ heroku git:clone -a &lt;heroku-app-name&gt;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ cd &lt;heroku-app-name&gt;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h6>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Option 2.&nbsp;&nbsp; &nbsp;&nbsp;</h6>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Link existing project to heroku app</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ cd &lt;your-project&gt;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ heroku git:remote -a &lt;heroku-app-name&gt;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3.&nbsp;&nbsp; &nbsp;Activate your virtual environment.</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ source ./envs/bin/activate &nbsp;&nbsp; &nbsp;#&nbsp;&nbsp; &nbsp;-&nbsp;&nbsp; &nbsp;Linux<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ .\\env\\Scripts\\activate &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#&nbsp;&nbsp; &nbsp;-&nbsp;&nbsp; &nbsp;Windows</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4.&nbsp;&nbsp; &nbsp;Create Procfile &amp; requirements.txt</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Procfile</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Heroku runs Djnago apps via gunicorn web server, recommended for production apps. Procfile declares Djnago apps&rsquo;s process types and entry points. This file should be present in project&#39;s root directory.</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ pip install gunicorn<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ cd &lt;your-project&gt;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ vi Procfile<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;web: gunicorn myproject.wsgi</code></div>\r\n\r\n<p>&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;requirements.txt</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Heroku recognizes Python &amp; Django apps via reading requirements.txt file which should be present in projects home directory. It contains modules/packages required for running the app. Include all your project dependent packages in requirements.txt</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ pip freeze &gt; requirements.txt</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5.&nbsp;&nbsp; &nbsp;Add Static file configuration details in &lt;your-project&gt;/settings.py</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">&nbsp;<code>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#Static Files<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;STATIC_ROOT = os.path.join(BASE_DIR, &#39;staticfiles&#39;)<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;STATIC_URL = &#39;/static/&#39;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;STATICFILES_DIRS = (<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;os.path.join(BASE_DIR, &#39;static&#39;),<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;)</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>6.&nbsp;&nbsp; &nbsp;Serve Static files via Whitenoise</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Edit&nbsp;<tt><em>&lt;your-project&gt;/settings.py</em></tt>&nbsp;to add whitenoise configuration to server static file to your python/Django Web app.</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;MIDDLEWARE = [<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;,<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;]</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>7.&nbsp;&nbsp; &nbsp;Initialize git repository in your project</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$ cd &lt;your-project&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;$ git init .<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;$ python manage.py collectstatic<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;$ git add .<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;$ git commit -m &quot;deploying to heroku first time&quot;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>8.&nbsp;&nbsp; &nbsp;Deploy or push codebase to Heroku&nbsp;</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;$ git push heroku master</code></div>", "created": "2023-02-15T22:48:07.742Z", "updated": "2023-02-15T22:50:53.839Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/WfDNB7C/django-heroku.jpg", "cover_image_file": null, "tag": [24, 2, 20], "likes": []}}, {"model": "blog.post", "pk": 7, "fields": {"title": "Twitter API: Fetch followers & following list of any user using Python script", "slug": "twitter-api-fetch-followers-following-list-of-a", "author": 1, "summary": "Scrap twitter Data using API & Python Script, save output to a Database or Spreadsheets", "body": "<p>Fetch Followers &amp; Following list of any user on Twitter and save the output to an excel file.<br />\r\nPerform other operations like Follow, unfollow etc automatically.</p>\r\n\r\n<p>This Python Script fetches Followers &amp; Following list of any Twitter user using Twitter API &amp; Python script and saves the output to an excel file called &quot;username_TwitterFollowers.xlsx&quot;.</p>\r\n\r\n<h3><strong>Github Repository</strong> :&nbsp;<strong><a href=\"https://github.com/aashutosh0012/TwitterAPI-followers_and_followings\">https://github.com/aashutosh0012/TwitterAPI-followers_and_followings</a></strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/N1yfpcx/twitter-api-script-cmd.png\" style=\"height:967px; width:975px\" /></p>\r\n\r\n<p><img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/1G0CFtL/twitter-excel.png\" /></p>", "created": "2023-02-15T23:07:18.391Z", "updated": "2023-02-17T11:53:53.223Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/Htp7q1C/twitter-api-python.webp", "cover_image_file": null, "tag": [1, 7, 11, 12, 13, 30], "likes": []}}, {"model": "blog.post", "pk": 8, "fields": {"title": "Opensource Infrastructure Monitoring Tool with REST API for Servers, Databases", "slug": "opensource-infrastructure-monitoring-tool-with-res", "author": 1, "summary": "Open source Data Center Infrastructure Monitoring tool for Linux & Windows Servers, Databases (Oracle, SQL Server, MySQL, PostgreSQL Sybase), Storage & Networks etc.", "body": "<h5><strong>Try Infrastrucre Monitoring Tool at :&nbsp;</strong><a href=\"https://infra-mon.herokuapp.com/\"><strong>https://infra-mon.herokuapp.com/</strong></a></h5>\r\n\r\n<h4><em><strong>&nbsp;</strong></em></h4>\r\n\r\n<h4><em><strong>Manage &amp; Monitor Infrastructure Inventories</strong></em></h4>\r\n\r\n<ul>\r\n\t<li>Servers</li>\r\n\t<li>Databases (Oracle, SQL Server, PostgreSQL, MySQL, Sybase, HANA)</li>\r\n\t<li>Storage</li>\r\n\t<li>Networks</li>\r\n</ul>\r\n\r\n<h4><em><strong>Features</strong></em></h4>\r\n\r\n<ul>\r\n\t<li>Add/Onboard/Update/Delete Inventories.</li>\r\n\t<li>Real time monitoring of Infrastructure like Status, Health, Latency, Performance, Availability, Outages.</li>\r\n\t<li>Dashboards, Charts &amp; Reporting.</li>\r\n\t<li>SPA (Single Page Application) (using htmx)</li>\r\n\t<li>Automatic Alerts &amp; Incidents to users, groups.</li>\r\n\t<li>ITSM Ticketing tools like Service Now, Jira integration via REST API.</li>\r\n\t<li>Inbuilt REST API for CRUD (Create, Retrieve, Update &amp; Delete) operations.</li>\r\n</ul>\r\n\r\n<h6><strong>Frameworks &amp; Libraries used:</strong></h6>\r\n\r\n<ul>\r\n\t<li>Python</li>\r\n\t<li>Django</li>\r\n\t<li>Django Rest Framework</li>\r\n\t<li>Bootstrap</li>\r\n\t<li>htmx</li>\r\n\t<li>pandas&nbsp;&nbsp;</li>\r\n\t<li>celery</li>\r\n\t<li>redis</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><strong>GitHub Repository :&nbsp;</strong><strong><a href=\"https://github.com/aashutosh0012/imon-InfraStructure-Monitoring-Tool\" target=\"_blank\">https://github.com/aashutosh0012/imon-InfraStructure-Monitoring-Tool</a></strong></h5>\r\n\r\n<h5><strong>Youtube Video&nbsp;<a href=\"https://www.youtube.com/watch?v=bfrNy-hks-c&amp;ab_channel=AashutoshKumar\">iMon - Opensource IT Infrastructure Monitoring Tool with REST API for Servers, Databases.. | Django</a></strong></h5>\r\n\r\n<iframe width=\"960\" height=\"620\" src=\"https://www.youtube.com/embed/bfrNy-hks-c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>", "created": "2023-02-15T23:24:11.112Z", "updated": "2023-02-15T23:29:26.393Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/B4fXCyp/imon-demo-26feb23.jpg", "cover_image_file": null, "tag": [1, 2, 3, 4, 6, 7, 11, 12, 13, 18], "likes": [1]}}, {"model": "blog.post", "pk": 14, "fields": {"title": "SolarWinds & Jira & Integration for Infrastructure Monitoring using Python, SQL, REST API", "slug": "solarwinds-jira-integration-for-infrastructure", "author": 1, "summary": "SolarWinds, a monitoring application, collects monitoring parameters from target objects, a Python Script reads new alerts from SolarWinds Database, and create and assign a Jira ticket", "body": "<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">SolarWinds Application collects all Alerts about any Objects in Different Tables in SolarWinds Database. The Alerts are stored in some tables only when the Alerts are Active, when Alert is resolved, Alerts is moved out of Active Alerts Table and recorded in Historical Tables. In Order to integrate SolarWinds Monitoring in Jira Service Desk for Ticket Creation for each alert, we:</span></span></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Read Active Alerts from SolarWinds Database.</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Store All Alerts in an external Database (INTERMEDIATE DB).</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Compare if the New Alerts is already present in INTERMEDIATE DB.</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">If the Alert is New, Insert Alert Data in a INTERMEDIATE DB Table which store all information along with Alert Current Status, and create a Ticket in Jira SD via REST API.</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">If the Alert is already present, Ignore the Alert, as the Alert is still active and Ticket has been created already in Jira SD.</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">If the Alert is not present in Active Alerts, but present in INTERMEDIATE DB Table, it means, Alert has resolved ,then Resolve the Ticket in Jira SD.</span></span></span></li>\r\n</ul>\r\n\r\n<p><img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/vk9Zqzs/solarwinds-jira-logic.png\" style=\"height:433px; width:1370px\" /></p>\r\n\r\n<p><span style=\"background-color:white\">&nbsp;</span></p>\r\n\r\n<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">Read Active Alerts from SolarWinds Database</span></span></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Method 1. Use OrionSDK to Read Active Alerts from Solarwinds Database (Requires Solarwinds Read-Only Authentication)</span></span></span></li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Method 2. Use Pyodbc Python module to connect to Solarwinds Database and read Active Alerts. (Requires Database Read-Only Authentication).</span></span></span></li>\r\n</ul>\r\n\r\n<p><span style=\"background-color:white\">&nbsp;</span></p>\r\n\r\n<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">Insert Active Alerts to INTERMEDIATE DB Active_Alerts Table.</span></span></span></p>\r\n\r\n<p><span style=\"background-color:white\">&nbsp;</span></p>\r\n\r\n<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">Process Alerts</span></span></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">If Alert is New:</span></span></span>\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">if Active_Alerts.AlertActiveID not in Alert_Log.AlertActiveID:</span></span></span></li>\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Create a Ticket in Jira SD via REST API.</span></span></span></li>\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Insert Ticket Details in Jira DB Table Alert_Log</span></span></span></li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">If Alert is Resolved:</span></span></span>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">if Alert_Log.AlertActiveID not in Active_Alerts.AlertActiveID:</span></span></span></li>\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Resolve Ticket in Jira SD via REST API.</span></span></span></li>\r\n\t\t<li><span style=\"background-color:white\"><span style=\"color:#212529\"><span style=\"background-color:white\">Update Alert_Log Table as Alert_Status = Resolved</span></span></span></li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"background-color:white\">&nbsp;<img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/607T1W6/solarwinds-jira-db-logic.png\" /></span></p>\r\n\r\n<p><img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/wSBXVzB/solarwinds-jira-db-logic-2.png\" /></p>\r\n\r\n<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">Sample Ticket in Jira Created by Script.</span></span></span></p>\r\n\r\n<p><span style=\"background-color:white\">&nbsp;<img class=\"img-fluid\" alt=\"\" src=\"https://i.ibb.co/mv5BQz1/solarwinds-jira-ticker.png\" /></span></p>\r\n\r\n<p><span style=\"background-color:white\"><span style=\"background-color:white\"><span style=\"color:#212529\">Python Script to integrate Solarwinds Alert to Jira.</span></span></span></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><code>import json, pyodbc, requests, threading, pandas as pd, time, os<br />\r\nfrom requests.auth import HTTPBasicAuth<br />\r\ntic = time.perf_counter()&nbsp;</code></p>\r\n\r\n<p><code>#Jira Connection<br />\r\nurl = &quot;https://&lt;jira-instance-url&gt;/rest/api/2/issue/&quot;<br />\r\nauth = HTTPBasicAuth(&quot;&lt;jira_user&gt;&quot;, &quot;jira_user_password&quot;)<br />\r\nheaders = { &quot;Accept&quot;: &quot;application/json&quot;,&quot;Content-Type&quot;: &quot;application/json&quot;}</code></p>\r\n\r\n<p><code>#Solarwinds Database Connection<br />\r\nserver = &#39;&lt;DB-INSTANCE-NAME&gt;&#39; &nbsp; &nbsp; &nbsp; &nbsp; #DB Instance where Script will store Data<br />\r\ndatabase = &#39;&lt;DB-NAME&gt;&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #DB Name where Script will store Data<br />\r\nusername = &#39;&lt;DB-USERNAME&gt;&#39;&nbsp;<br />\r\npassword = &#39;*********&#39;&nbsp;<br />\r\ncon = &#39;Yes&#39;<br />\r\nconn = pyodbc.connect(&#39;DRIVER={ODBC Driver 17 for SQL Server};SERVER=&#39;+server+&#39;;DATABASE=&#39;+database+&#39;;UID=&#39;+username+&#39;;PWD=&#39;+ password)<br />\r\n#conn.autocommit = True<br />\r\ncursor = conn.cursor()</code></p>\r\n\r\n<p><code>def create_ticket(ai,name,ec,rnc,ltdt,sev,ot,ia,ct,cy,r,ag,o):<br />\r\n&nbsp; &nbsp; &quot;&quot;&quot; This Function Create a Ticket in Jira Service Desk &quot;&quot;&quot;<br />\r\n&nbsp; &nbsp; cursor = conn.cursor()<br />\r\n&nbsp; &nbsp; Alert_ID=ai<br />\r\n&nbsp; &nbsp; summary = rnc + &#39; &#39; + name<br />\r\n&nbsp; &nbsp; desc = name + &#39;\\n&#39; + ec + &#39;\\n&#39; + rnc<br />\r\n&nbsp; &nbsp; desc = &quot;Alert: {} \\n Entity: {} \\n Node: {}&quot;.format(name,ec,rnc)<br />\r\n&nbsp; &nbsp; desc = f&quot;*Alert: {name}*\\n*Node: {rnc}*\\n*Alert_Object: {ec}*\\n*Object_Type: {ot}*\\nIP_Address: {ia}\\nTrigger Time: {ltdt} (UTC)\\nCity: {ct}\\nCountry: {cy}\\nRegion: {r}\\nAssignment_Group: {ag}\\nOwners: {o}&quot;<br />\r\n&nbsp; &nbsp; if sev == 1:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; v_priority = &quot;High&quot;<br />\r\n&nbsp; &nbsp; elif sev == 2:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; v_priority = &quot;Medium&quot;<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; v_priority = &quot;Low&quot;<br />\r\n&nbsp; &nbsp; payload = json.dumps(<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;fields&quot;:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;project&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;key&quot;: &quot;&lt;PROJECT-KEY&gt;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;summary&quot;: summary,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;description&quot;: desc,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;issuetype&quot;:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;name&quot;: &quot;Incident&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;components&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [{&quot;name&quot;:&quot;Active Directory&quot; }],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;priority&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&quot;name&quot;:v_priority},<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;assignee&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;name&quot;:&quot;aashutosh.kumar@technicolor.com&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; )<br />\r\n&nbsp; &nbsp; response = requests.request(<br />\r\n&nbsp; &nbsp; &quot;POST&quot;,<br />\r\n&nbsp; &nbsp; url,<br />\r\n&nbsp; &nbsp; data=payload,<br />\r\n&nbsp; &nbsp; headers=headers,<br />\r\n&nbsp; &nbsp; auth=auth,<br />\r\n&nbsp; &nbsp; verify=r&#39;bundle.pem&#39;<br />\r\n&nbsp; &nbsp; )<br />\r\n&nbsp; &nbsp; print(&#39;\\nTicket Created:&#39;)<br />\r\n&nbsp; &nbsp; print(&#39;Alert ID: &#39;,ai,&#39;\\n&#39;,json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(&quot;,&quot;, &quot;: &quot;))) &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; Ticket_No = json.loads(response.text)[&#39;key&#39;]<br />\r\n&nbsp; &nbsp; update_ticket_table_sql = &quot;&quot;&quot;insert into jira_test.Ticket_Log values ({},&#39;{}&#39;,&#39;OPEN&#39;);commit;&quot;&quot;&quot;.format(Alert_ID,Ticket_No)<br />\r\n&nbsp; &nbsp; #print(update_ticket_table_sql)<br />\r\n&nbsp; &nbsp; cursor.execute(update_ticket_table_sql)<br />\r\n&nbsp; &nbsp; cursor.commit()<br />\r\n&nbsp; &nbsp; cursor.close()</code></p>\r\n\r\n<p><br />\r\n<code>def resolve_ticket(ticket):<br />\r\n&nbsp; &nbsp; &quot;&quot;&quot;This Function Resolves Jira SD Ticket for Resolved Alerts&quot;&quot;&quot;<br />\r\n&nbsp; &nbsp; cursor = conn.cursor()<br />\r\n&nbsp; &nbsp; comment_url=&#39;&lt;jira-instance-url&gt;/rest/api/2/issue/&#39; + ticket + &#39;/comment&#39;<br />\r\n&nbsp; &nbsp; comment_payload = json.dumps(<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;body&quot;:&quot;Issue Detected Resolved by Solarwinds&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; )<br />\r\n&nbsp; &nbsp; response = requests.request(&quot;POST&quot;,comment_url,data=comment_payload,headers=headers,auth=auth,verify=r&#39;bundle.pem&#39;) &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; url=&#39;&lt;jira-instance-url&gt;/rest/api/2/issue/&#39;+ticket+&#39;/transitions&#39;<br />\r\n&nbsp; &nbsp; payload = json.dumps(<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;update&quot;: {},<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;fields&quot;:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;resolution&quot;:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;name&quot;: &quot;Done&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;transition&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;id&quot;: &quot;111&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; )<br />\r\n&nbsp; &nbsp; response = requests.request(<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;POST&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; url,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; data=payload,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; headers=headers,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; auth=auth,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; verify=r&#39;bundle.pem&#39;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; )<br />\r\n&nbsp; &nbsp; update_ticket_table_sql = &quot;update &lt;DB-NAME&gt;.ticket_log set Ticket_Status=&#39;RESOLVED&#39; where Ticket_No=&#39;{}&#39;;&quot;.format(ticket)<br />\r\n&nbsp; &nbsp; #print(update_ticket_table_sql)<br />\r\n&nbsp; &nbsp; cursor.execute(update_ticket_table_sql)<br />\r\n&nbsp; &nbsp; cursor.commit()<br />\r\n&nbsp; &nbsp; cursor.close()<br />\r\n&nbsp; &nbsp; if len(response.text) == 0:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(f&#39;\\n\\tTicket Resolved:{ticket}\\n&#39;)<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(f&#39;\\n\\tError in Updating : {ticket}&#39;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(&quot;,&quot;, &quot;: &quot;)))</code></p>\r\n\r\n<p><code>fetch_alerts=&quot;&quot;&quot;<br />\r\ndrop table &lt;DB-NAME&gt;.jira_test.Active_Alerts;<br />\r\nselect<br />\r\n&nbsp; &nbsp; AA.AlertActiveID as AlertActiveID,<br />\r\n&nbsp; &nbsp; AO.AlertObjectID as AlertObjectID,AHV.Name as Name, AO.EntityCaption as EntityCaption, AO.RelatedNodeCaption as RelatedNodeCaption,AO.LastTriggeredDateTime,<br />\r\n&nbsp; &nbsp; AC.ObjectType as ObjectType,AHV.Severity as Severity,&nbsp;<br />\r\n&nbsp; &nbsp; N.NodeID ,N.IP_Address, N.Comments ,N.City, N.Country ,N.Region ,N.Assignment_Group ,N.Owners<br />\r\n&nbsp; &nbsp; into JIRA_SW_TEST.jira_test.Active_Alerts<br />\r\nfrom<br />\r\n&nbsp; &nbsp; [&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.AlertObjects AO<br />\r\n&nbsp; &nbsp; INNER JOIN &nbsp; &nbsp; [&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.AlertActive AA ON AO.AlertObjectID &nbsp; &nbsp;= &nbsp; &nbsp;AA.AlertObjectID<br />\r\n&nbsp; &nbsp; INNER JOIN &nbsp;[&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.AlertHistoryView AHV ON AA.AlertActiveID &nbsp; &nbsp;= &nbsp; &nbsp;AHV.AlertActiveID &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AND AO.AlertObjectID &nbsp; &nbsp;= &nbsp; &nbsp;AHV.AlertObjectID<br />\r\n&nbsp; &nbsp; INNER JOIN &nbsp; &nbsp; [&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.AlertConfigurations AC ON AC.AlertID &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= &nbsp; &nbsp;AO.AlertID<br />\r\n&nbsp; &nbsp; INNER JOIN &nbsp; &nbsp; [&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.NodesCustomProperties NCP ON AO.RelatedNodeID &nbsp; &nbsp; = &nbsp; &nbsp;NCP.NodeID<br />\r\n&nbsp; &nbsp; INNER JOIN &nbsp; &nbsp; [&lt;Solarwinds-DB-Server-Instance&gt;].solarwindsorion.dbo.Nodes N ON AO.RelatedNodeID &nbsp; &nbsp; = &nbsp; &nbsp; N.NodeID<br />\r\nwhere&nbsp;<br />\r\n&nbsp; &nbsp; AHV.EventTypeWord=&#39;Triggered&#39;<br />\r\nand upper(AHV.Name) not like &#39;%HIGH RESPONSE TIME%&#39;&nbsp;<br />\r\nand upper(AHV.Name) not like &#39;%HIGH PACKET LOSS%&#39;<br />\r\nOrder By AO.LastTriggeredDateTime desc;<br />\r\ncommit; &nbsp; &nbsp;<br />\r\n&quot;&quot;&quot;</code></p>\r\n\r\n<p><code>process_alerts=&quot;&quot;&quot;<br />\r\nDECLARE @NEWVALUE int<br />\r\nDECLARE @RESOLVED int<br />\r\nselect @NEWVALUE = count(*) from jira_test.Active_Alerts where NOT EXISTS&nbsp;<br />\r\n(select 1 from jira_test.Alert_log where jira_test.Active_Alerts.AlertActiveID = jira_test.Alert_log.AlertActiveID)<br />\r\nselect @RESOLVED = count(*) from jira_test.Alert_log where NOT EXISTS&nbsp;<br />\r\n(select 1 from jira_test.Active_Alerts where jira_test.Active_Alerts.AlertActiveID = jira_test.Alert_log.AlertActiveID)<br />\r\nIF (@NEWVALUE &gt; 0)<br />\r\nBEGIN<br />\r\n&nbsp; &nbsp; insert into jira_test.Alert_log select *,&#39;NEW&#39; from jira_test.Active_Alerts where NOT EXISTS&nbsp;<br />\r\n&nbsp; &nbsp; (select 1 from jira_test.Alert_log where jira_test.Active_Alerts.AlertActiveID = jira_test.Alert_log.AlertActiveID);<br />\r\n&nbsp; &nbsp; commit;<br />\r\nEND<br />\r\nIF (@RESOLVED &gt; 0)<br />\r\nBEGIN<br />\r\n&nbsp; &nbsp; update jira_test.Alert_log set Alert_Status = &#39;RESOLVED&#39; where&nbsp;<br />\r\n&nbsp; &nbsp; AlertActiveID in (select AlertActiveID from jira_test.Alert_log where NOT EXISTS&nbsp;<br />\r\n&nbsp; &nbsp; (select 1 from jira_test.Active_Alerts where jira_test.Active_Alerts.AlertActiveID = jira_test.Alert_log.AlertActiveID));<br />\r\n&nbsp; &nbsp; commit;<br />\r\nEND&nbsp;<br />\r\n&quot;&quot;&quot;</code></p>\r\n\r\n<p><code>cursor.execute(fetch_alerts)<br />\r\ncursor.execute(process_alerts)<br />\r\ncursor.commit()<br />\r\ncursor.close()</code></p>\r\n\r\n<p><code>#Create Ticket for New Alerts<br />\r\nnew_alerts = pd.read_sql_query(&#39;SELECT * FROM JIRA_SW_TEST.jira_test.Alert_log where ALert_Status=\\&#39;NEW\\&#39; and &nbsp;AlertActiveID not in (select Alert_ID from jira_test.Ticket_log) &#39;,conn)<br />\r\ndata = new_alerts[[&#39;AlertActiveID&#39;,&#39;Name&#39;,&#39;EntityCaption&#39;,&#39;RelatedNodeCaption&#39;,&#39;LastTriggeredDateTime&#39;,&#39;Severity&#39;,&#39;ObjectType&#39;,&#39;IP_Address&#39;,&#39;City&#39;,&#39;Country&#39;,&#39;Region&#39;,&#39;Assignment_Group&#39;,&#39;Owners&#39;]]<br />\r\nfor index,row in data.iterrows():<br />\r\n&nbsp; &nbsp; threading.Thread(target=create_ticket,args=[ row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11], row[12] ]).start()</code></p>\r\n\r\n<p><code>#Resolve Ticket for Resolved Alerts<br />\r\nresolved_alerts = pd.read_sql_query(&#39;select Ticket_No from jira_test.Ticket_Log TL left join jira_test.Alert_log AL on TL.Alert_ID = AL.AlertActiveID where TL.Ticket_Status=\\&#39;OPEN\\&#39; and AL.Alert_Status=\\&#39;RESOLVED\\&#39;&#39;,conn)<br />\r\nfor index, row in resolved_alerts.iterrows():<br />\r\n&nbsp; &nbsp; threading.Thread(target=resolve_ticket,args=[row[0]]).start()<br />\r\ntoc = time.perf_counter()&nbsp;<br />\r\nprint(f&quot;\\nDone! &nbsp; &nbsp;Time Taken= {toc-tic:0.4f} Seconds\\n&quot;)</code></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>", "created": "2023-02-17T09:06:16.995Z", "updated": "2023-02-17T11:51:20.902Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/fn5nq8F/solarwinds-jira.jpg", "cover_image_file": "/static/images/random/sponge-balls.59a1ad938460.jpg", "tag": [1, 4, 7, 11, 12, 13, 18, 28], "likes": []}}, {"model": "blog.post", "pk": 15, "fields": {"title": "CI/CD using Jira & GitHub-Actions, Python, REST API.", "slug": "cicd-using-jira-github-actions-python-rest-ap", "author": 1, "summary": "Integrate Jira and GitHub-Actions using Python script & REST API.", "body": "<p>This is quick hack to automate advanced functionalities in Jira using custom Python script and utilizing GitHub-Actions or any other tools like AWS Lambda, GCP &amp; Azure Functions, Jenkins, or any custom webserver.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Jira Service Management has very good Automation feature, but to automate highly advanced features, we can use a custom python script which does the business logic processing and update Jira via REST API.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>We can write a workflow, whenever any event happens in Jira, we will trigger our script to execute, hosted on GitHub in this case.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Use Case Example:</p>\r\n\r\n<h3>Global Finance Application</h3>\r\n\r\n<ul>\r\n\t<li>A request form, which takes input from user for Payment requests.</li>\r\n\t<li>Based on inputs like Country, City etc., automatically assign Approvers.</li>\r\n\t<li>Convert user input amount and currency to desired currency.</li>\r\n\t<li>Automatically decide levels of approvals, based on threshold value.</li>\r\n\t<li>Once approvals done, send web request to Payment API.</li>\r\n</ul>\r\n\r\n<p><img alt=\"\" class=\"img-fluid\" src=\"https://i.ibb.co/Ry56qRy/jira-form.jpg\" style=\"height:554px; width:500px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Step 1 : Create automation rule in Jira.</h3>\r\n\r\n<p style=\"margin-left:48px\">Project -&gt; Project Settings -&gt; Automation -&gt; Create Rule<br />\r\nNew Trigger -&gt; Select Event when you want to trigger rule.<br />\r\nExample: When Issue Created.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then Send Web Request<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Send Web Request to GitHub Repository dispatch with custom data (issue key &amp; jira api token)<br />\r\n<img alt=\"\" class=\"img-fluid\" src=\"https://i.ibb.co/8m31Fbc/Trigger-Github-Actions-when-Issue-created-in-Jira.jpg\" style=\"height:441px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Step 2: Set up GitHub</h3>\r\n\r\n<p>Create a GitHub Repo and below workflow.yml file in <em><strong>.github/workflows/</strong></em> directory</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><code>name: my build name&nbsp;</code></p>\r\n\r\n<p><code># trigger when this repository is dispatch (called from Jira Web request)<br />\r\non: repository_dispatch &nbsp;<br />\r\njobs:<br />\r\n&nbsp; build:<br />\r\n&nbsp; &nbsp; runs-on: ubuntu-latest<br />\r\n&nbsp; &nbsp; steps:<br />\r\n&nbsp; &nbsp; - uses: actions/checkout@v3<br />\r\n&nbsp; &nbsp; - uses: actions/setup-python@v4<br />\r\n&nbsp; &nbsp; &nbsp; with:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; python-version: &#39;3.10&#39;&nbsp;<br />\r\n&nbsp; &nbsp; - name: Install Dependencies<br />\r\n&nbsp; &nbsp; &nbsp; run: |<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; python -m pip install --upgrade pip<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; pip install -r requirements.txt<br />\r\n&nbsp; &nbsp; - name: Name of run task<br />\r\n&nbsp; &nbsp; &nbsp; run: |<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; python automation_script.py ${{ github.event.client_payload.key }} ${{ github.event.client_payload.jira-token }}</code></p>\r\n</div>\r\n\r\n<p><img alt=\"\" class=\"img-fluid\" src=\"https://i.ibb.co/VDqgppS/github-actions-workflow.jpg\" style=\"height:306px; width:700px\" /></p>\r\n\r\n<h4>Upload Python Script &amp; dependent files to GitHub Reposiory<br />\r\n<br />\r\nApprovers Matrix<br />\r\n<img alt=\"\" class=\"img-fluid\" src=\"https://i.ibb.co/1Q7xGHz/approval-workflow-matrix-excel.jpg\" style=\"float:left; height:184px; width:450px\" /></h4>\r\n\r\n<p><img alt=\"\" class=\"img-fluid\" src=\"https://i.ibb.co/khzjy2y/jira-approver-account-ID.jpg\" />&nbsp;</p>\r\n\r\n<h4><u><strong>Python Script</strong></u><br />\r\n&nbsp;</h4>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><code>import re&nbsp;<br />\r\nimport sys<br />\r\nimport json<br />\r\nimport requests&nbsp;<br />\r\nimport datetime<br />\r\nimport pandas as pd<br />\r\nfrom requests.auth import HTTPBasicAuth</code></p>\r\n\r\n<p><code># get jira issue key and api token passed via Jira web request as arguments to script as defined in GitHub-Actions Workflow<br />\r\nissueKey=sys.argv[1]<br />\r\njiraAPIToken=sys.argv[2]</code></p>\r\n\r\n<p><code>jiraAPIToken = &#39;***********8&#39;<br />\r\nemail = &#39;aashutosh&#39;<br />\r\nauth = HTTPBasicAuth(email,jiraAPIToken)<br />\r\nheaders = {<br />\r\n&nbsp; &nbsp; &quot;Accept&quot;: &quot;application/json&quot;,<br />\r\n&nbsp; &nbsp; &quot;Content-Type&quot;: &quot;application/json&quot;<br />\r\n}</code></p>\r\n\r\n<p><code># generate REST API URL with issue-key<br />\r\nurl=&#39;https://mysite.atlassian.net/rest/api/3/issue/&#39;+issueKey</code></p>\r\n\r\n<p><code># fetch data using requests from Jira REST API<br />\r\nresponse = requests.request(<br />\r\n&nbsp; &nbsp;&quot;GET&quot;,<br />\r\n&nbsp; &nbsp;url,<br />\r\n&nbsp; &nbsp;headers=headers,<br />\r\n&nbsp; &nbsp;auth=auth<br />\r\n)</code></p>\r\n\r\n<p><code># print json data in pretty format<br />\r\n# print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(&quot;,&quot;, &quot;: &quot;)))<br />\r\ndata=json.loads(response.text)</code></p>\r\n\r\n<p><code>&#39;&#39;&#39;<br />\r\nPerform Business Logic<br />\r\nJira Custom Fields ID<br />\r\ncustomfield_10001 = Country &amp; City Custom Field id in Jira<br />\r\ncustomfield_10002 = Amount<br />\r\ncustomfield_10003 = Currency<br />\r\ncustomfield_10004 = Level 1 Approver<br />\r\ncustomfield_10005 = Level 2 Approver<br />\r\ncustomfield_10006 = Level 3 Approver<br />\r\ncustomfield_10007 = Amount in Euro<br />\r\n&#39;&#39;&#39;</code></p>\r\n\r\n<p><code>country &nbsp;= data[&#39;fields&#39;][&#39;customfield_10001&#39;][&#39;value&#39;]<br />\r\ncity &nbsp; &nbsp; = data[&#39;fields&#39;][&#39;customfield_10001&#39;][&#39;value&#39;]<br />\r\namount &nbsp; = float(data[&#39;fields&#39;][&#39;customfield_10002&#39;])<br />\r\ncurrency = data[&#39;fields&#39;][&#39;customfield_10003&#39;]</code></p>\r\n\r\n<p><code>#Store Approver &amp; Approvers Matrix in an excel sheet mapped to each Country &amp; City<br />\r\n#Read approvers excel sheet using pandas dataframe<br />\r\ndf = pd.read_excel(&#39;approver.xlsx&#39;)</code></p>\r\n\r\n<p><code># Read Approvers Excel file<br />\r\ndf = pd.read_excel(&#39;approvers.xlsx&#39;)</code></p>\r\n\r\n<p><code># Read Approvers Name &amp; Jira Account IDs. convert pairs into dictionary<br />\r\naccountIDs_df = pd.read_excel(&#39;approvers.xlsx&#39;, sheet_name=1)</code></p>\r\n\r\n<p><code># Make Dictionary of Approvers Account Names &amp; AccountIDs<br />\r\napprovers_accountIDs = dict(zip(accountIDs_df.Name, accountIDs_df.AccountID))</code></p>\r\n\r\n<p><code>#Filter Approvers Row for each Country &amp; City<br />\r\napprover_row = df[ (country == df[&#39;Country&#39;]) &amp; (city == df[&#39;City&#39;]) ]</code></p>\r\n\r\n<p><code>def get_approversID(column_name, approver_row):<br />\r\n&nbsp; &nbsp; &#39;&#39;&#39;<br />\r\n&nbsp; &nbsp; Get Approvers Account ID from Excel sheet,&nbsp;<br />\r\n&nbsp; &nbsp; join account ids for multiple users in single cell,&nbsp;<br />\r\n&nbsp; &nbsp; split, strip &amp; join.<br />\r\n&nbsp; &nbsp; &#39;&#39;&#39;<br />\r\n&nbsp; &nbsp; # split multiple users in once cell<br />\r\n&nbsp; &nbsp; approvers = approver_row[column_name].values[0].split(&#39;,&#39;)<br />\r\n&nbsp; &nbsp; # strip whitespaces in users name<br />\r\n&nbsp; &nbsp; approvers = [ user.strip() for user in approvers ]<br />\r\n&nbsp; &nbsp; # join users with comma, return their Account ID<br />\r\n&nbsp; &nbsp; approvers = &#39;,&#39;.join([approvers_accountIDs[user] for user in approvers])<br />\r\n&nbsp; &nbsp; return approvers</code></p>\r\n\r\n<p><br />\r\n<code>level1Approvers = get_approversID(&#39;Level_1_Approver&#39;,approver_row)<br />\r\nlevel2Approvers = get_approversID(&#39;Level_2_Approver&#39;,approver_row)<br />\r\nlevel3Approvers = get_approversID(&#39;Level_3_Approver&#39;,approver_row)</code></p>\r\n\r\n<p><br />\r\n<code>def currRate(curr):<br />\r\n&nbsp;&nbsp; &nbsp;# Function to convert currency into EURO, ruturn currency exchange rate w.r.t EURO<br />\r\n&nbsp; &nbsp; return &nbsp;{<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;AED - UAE Dirham&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 4.55,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;ARS - Argentine Peso&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 90.4693,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;AUD - Australian Dollar&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp; 1.62,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;BRL - Brazilian Real&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 6.6308,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;CAD - Canadian Dollar&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp; 1.52,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;CNY - Yuan Reminbi&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 7.972,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;EUR - Euro&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 1,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;GBP - Pound Sterling&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 0.89,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;HKD - Hong Kong Dollar&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 8.915,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;INR - Indian Rupee&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 84,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;JPY - Yen&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp; 121,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;MXN - Mexican Peso&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 24,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;RUB - Ruble&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp; 91.7763,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;SEK - Swedish Kronor&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 10.5713,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;SGD - Singapore Dollar&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 1.58,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;THB - Baht&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; 37.079,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &#39;USD - US Dollar&#39; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : &nbsp; 1.15,<br />\r\n&nbsp; &nbsp; }.get(curr)</code></p>\r\n\r\n<p><code>&nbsp; &nbsp;&nbsp;<br />\r\n# get amount in Eurom by multiplying amount with currency rate<br />\r\namount_Euro = float(amount * currRate(currency)</code></p>\r\n\r\n<p><br />\r\n<code>payload = json.dumps( {<br />\r\n&nbsp; &nbsp; &quot;fields&quot;: {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;customfield_10004&quot;: [{&quot;accountId&quot;: level1Approvers}],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;customfield_10004&quot;: [{&quot;accountId&quot;: level1Approvers}],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;customfield_10005&quot;: [{&quot;accountId&quot;: level2Approvers}],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;customfield_10006&quot;: [{&quot;accountId&quot;: level3Approvers}],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;customfield_10007&quot;: amount_Euro,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n}) &nbsp;&nbsp;</code></p>\r\n\r\n<p><code>#Update Jira<br />\r\nresponse = requests.request(<br />\r\n&nbsp; &nbsp;&quot;PUT&quot;,<br />\r\n&nbsp; &nbsp;url,<br />\r\n&nbsp; &nbsp;data=payload,<br />\r\n&nbsp; &nbsp;headers=headers,<br />\r\n&nbsp; &nbsp;auth=auth<br />\r\n)<br />\r\nprint(f&#39;Response = {response.status_code, response.text}&#39;)</code><br />\r\n&nbsp;</p>\r\n</div>", "created": "2023-02-17T13:40:29.588Z", "updated": "2023-02-17T20:49:00.778Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/M2NVBk2/jira-github.jpg", "cover_image_file": "/static/images/random/night-sky-tree.3c168d218d05.jpg", "tag": [1, 7, 11, 12, 13, 28], "likes": []}}, {"model": "blog.post", "pk": 16, "fields": {"title": "Automatic Table Partitioning (Date Range) in Oracle Database using Bash shell script.", "slug": "automatic-table-partitioning-date-range-in-oracl", "author": 1, "summary": "Linux Bash shell script to Automatically create new date range partitions for a table every month and delete older partitions.", "body": "<p>Lets say, I have a large table called Orders, which I need to partition based on each Month data.<br />\r\nEach partition will contains data for a specific month, and partitions older than 1 year will be deleted automatically.<br />\r\nEach partitions will reside in its own tablespace with same name.</p>\r\n\r\n<p>The Bash script will</p>\r\n\r\n<ul>\r\n\t<li>Create New Tablespace &amp; Partition for each month.</li>\r\n\t<li>Drop Older than 1 year Partition &amp; tablespace including datafiles.</li>\r\n\t<li>Rebuild Indexes and execute gather stats on the Table.</li>\r\n</ul>\r\n\r\n<p>Below is an example of Partition &amp; Tablespace naming structure</p>\r\n\r\n<p>Table Name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = ORDERS<br />\r\nNew Partition Name &nbsp; = ORDERS_202302<br />\r\nNew Tablespace Name &nbsp;= ORDERS_202302</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>select PARTITION_NAME,<br />\r\n&nbsp;&nbsp; &nbsp;tablespace_name,<br />\r\n&nbsp;&nbsp; &nbsp;NUM_ROWS<br />\r\nfrom dba_tab_partitions&nbsp;<br />\r\nwhere TABLE_OWNER = &#39;schema-name&#39;<br />\r\nand TABLE_NAME=&#39;ORDERS&#39; order by partition_name desc;</code></div>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>PARTITION_NAME &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TABLESPACE_NAME &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NUM_ROWS<br />\r\n------------------------- ------------------------- ----------<br />\r\nORDERS_202302&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;ORDERS_202302&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-- &gt; To be created, new partiotion for new month<br />\r\nORDERS_202301 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202301 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4074603<br />\r\nORDERS_202212 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202212 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5204062<br />\r\nORDERS_202211 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202211 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4981191<br />\r\nORDERS_202210 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202210 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6456684<br />\r\nORDERS_202209 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202209 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4821135<br />\r\nORDERS_202208 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202208 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5066927<br />\r\nORDERS_202207 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202207 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5824346<br />\r\nORDERS_202206 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202206 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6477975<br />\r\nORDERS_202205 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202205 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5091088<br />\r\nORDERS_202204 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202204 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5774805<br />\r\nORDERS_202203 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202203 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7063802<br />\r\nORDERS_202202 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202202 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5876999<br />\r\nORDERS_202201 &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_202201 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5098684&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-- &gt; To be Dropped, 1 year old partition<br />\r\nOTHER &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ORDERS_OTHER &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 102375659</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><u><strong>Table Partitioning Script&nbsp;</strong></u></h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><code>#!/usr/bin/bash</code></p>\r\n\r\n<p><code># export ORACLE enviroment<br />\r\nexport ORACLE_SID=SID; . oraenv</code></p>\r\n\r\n<p><code># Table Name to be partitioned<br />\r\nTABLE=ORDERS</code></p>\r\n\r\n<p><code># Partition Date Range<br />\r\nPARTITION_DATE_RANGE=`date +%m/01/%Y`</code></p>\r\n\r\n<p><code># NEW_TABLE_PARTITION = ORDERS_202302 &nbsp;(TABLENAME_YYYYMM, current year)&nbsp;<br />\r\nNEW_TABLE_PARTITION=${TABLE}_`date +%Y%m`</code></p>\r\n\r\n<p><code># OLD_TABLE_PARTITION = ORDERS_202202 (TABLENAME_YYYYMM, last year)<br />\r\nOLD_TABLE_PARTITION=${TABLE}_`expr $(date +%Y%m) - 100`</code></p>\r\n\r\n<p><code># NEW_INDEX_TABLESPACE = ORDERS_IX_202302 (INDEXNAME_YYYYMM, current year)<br />\r\nNEW_INDEX_TABLESPACE=${TABLE}_IX_`date +%Y%m`</code></p>\r\n\r\n<p><code># OLD_INDEX_TABLESPACE = ORDERS_IX_202202 (INDEXNAME_YYYYMM, last year)<br />\r\nOLD_INDEX_TABLESPACE=${TABLE}_IX_`expr $(date +%Y%m) - 100`</code></p>\r\n\r\n<p><br />\r\n<code># Get the old last year tablespace (ORDERS_202202) data_file name &amp; location,&nbsp;<br />\r\n# new tablespace (ORDERS_202302) data file, will be created in the same mount point/directory as old<br />\r\n# OLD_DATAFILE=/storage/APP/DATA001/oradata/orders_202202_01.dbf<br />\r\nOLD_DATAFILE=`sqlplus -s / as sysdba&lt;&lt;EOF<br />\r\nset heading off<br />\r\nset feedback off<br />\r\nset pagesize 0<br />\r\nselect file_name from dba_data_files where tablespace_name = &#39;$OLD_TABLE_PARTITION&#39; and rownum=1 order by file_name;<br />\r\nEOF`</code></p>\r\n\r\n<p><code># convert names to lower case<br />\r\nOLD_FILE=`echo $OLD_TABLE_PARTITION | tr A-Z a-z`<br />\r\nNEW_FILE=`echo $NEW_TABLE_PARTITION | tr A-Z a-z`<br />\r\n# replace old partition_name to new partition_name in datafile name<br />\r\n# OLD_DATAFILE=/storage/APP/DATA001/oradata/orders_202202_01.dbf<br />\r\n# NEW_DATAFILE=/storage/APP/DATA001/oradata/orders_202302_01.dbf<br />\r\nNEW_DATAFILE=`echo $OLD_DATAFILE | sed &quot;s/$OLD_FILE/$NEW_FILE/g&quot;`</code></p>\r\n\r\n<p><code># get filename for index tablespace, and generate new index tablespace file name in same directory<br />\r\nOLD_INDEXFILE=`sqlplus -s / as sysdba&lt;&lt;EOF<br />\r\nset heading off<br />\r\nset feedback off<br />\r\nset pagesize 0<br />\r\nselect file_name from dba_data_files where tablespace_name like &#39;$OLD_INDEX_TABLESPACE&#39; and rownum=1 order by file_name;<br />\r\nEOF`</code></p>\r\n\r\n<p><code>OLD_FILE=`echo $OLD_TABLE_PARTITION | tr A-Z a-z`<br />\r\nNEW_FILE=`echo $NEW_TABLE_PARTITION | tr A-Z a-z`<br />\r\nNEW_INDEXFILE=`echo $OLD_INDEXFILE | sed &quot;s/$OLD_FILE/$NEW_FILE/g&quot;`</code></p>\r\n\r\n<p><br />\r\n<code>echo &quot;&quot;<br />\r\necho &quot;New_Partition &nbsp; &nbsp; &nbsp; &nbsp;= $NEW_TABLE_PARTITION&quot;<br />\r\necho &quot;Old_Partition &nbsp; &nbsp; &nbsp; &nbsp;= $OLD_TABLE_PARTITION&quot;<br />\r\necho &quot;New_Tablespace &nbsp; &nbsp; &nbsp; = $NEW_TABLE_PARTITION&quot;<br />\r\necho &quot;New_DB_File &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= $NEW_DATAFILE&quot;<br />\r\necho &quot;New_Index_DB_File &nbsp; &nbsp;= $NEW_INDEXFILE&quot;<br />\r\necho &quot;New_Index_Partition &nbsp;= $NEW_INDEX_TABLESPACE&quot;<br />\r\necho &quot;Old_Index_Partition &nbsp;= $OLD_INDEX_TABLESPACE&quot;<br />\r\necho &quot;&quot;</code></p>\r\n\r\n<p><code># Login to database, drop old partition &amp; tablespace, create new tablespace &amp; split table paritions<br />\r\nsqlplus / as sysdba &lt;&lt;EOF<br />\r\nset time on<br />\r\nset timing on<br />\r\nset echo on</code></p>\r\n\r\n<p><code>-- Truncate older Partition<br />\r\nalter table schema.ORDERS truncate partition $OLD_TABLE_PARTITION;</code></p>\r\n\r\n<p><code>--drop older partition<br />\r\nalter table schema.ORDERS drop partition $OLD_TABLE_PARTITION;</code></p>\r\n\r\n<p><code>--Offline older tablespace<br />\r\nalter tablespace $OLD_TABLE_PARTITION offline;</code></p>\r\n\r\n<p><code>-- drop older tablespace including datafiles<br />\r\ndrop &nbsp;tablespace $OLD_TABLE_PARTITION including contents and datafiles;</code></p>\r\n\r\n<p><code>--offline older index tablespace<br />\r\nalter tablespace $OLD_INDEX_TABLESPACE offline;</code></p>\r\n\r\n<p><code>--drop older index tablespace including datafiles<br />\r\ndrop &nbsp;tablespace $OLD_INDEX_TABLESPACE including contents and datafiles;</code></p>\r\n\r\n<p><code>-- create new tablespace<br />\r\ncreate tablespace $NEW_TABLE_PARTITION datafile &#39;$NEW_DATAFILE&#39; size 8000M;<br />\r\ncreate tablespace $NEW_INDEX_TABLESPACE datafile &#39;$NEW_INDEXFILE&#39; size 8000M;</code></p>\r\n\r\n<p><code>-- grant quota to schema user on new tablespace<br />\r\nalter user schema quota unlimited on $NEW_TABLE_PARTITION;<br />\r\nalter user schema quota unlimited on $NEW_INDEX_TABLESPACE;</code></p>\r\n\r\n<p><code>-- Add &amp; split Parition to table<br />\r\nALTER TABLE $TABLE SPLIT PARTITION ALL_OTHER AT (TO_DATE(&#39;$PARTITION_DATE_RANGE&#39;,&#39;MM/DD/YYYY&#39;)) INTO (PARTITION $NEW_TABLE_PARTITION TABLESPACE $NEW_TABLE_PARTITION, PARTITION OTHER TABLESPACE ORDERS);<br />\r\nEOF</code></p>\r\n\r\n<p><br />\r\n<code># Generate SQL script to rebuild Indexes<br />\r\nsqlplus -s / as sysdba&lt;&lt;EOF<br />\r\nset lin 300<br />\r\nset heading off<br />\r\nset feedback off<br />\r\nset pagesize 0<br />\r\nspool rebuild_schema_indexes.sql<br />\r\nselect &#39;alter index schema.&#39;||index_name||&#39; rebuild subpartition &#39;||subpartition_name||&#39; tablespace &#39;||tablespace_name||&#39;;&#39; from dba_ind_subpartitions where index_name in (select distinct(index_name) from dba_indexes where table_name = &#39;ORDERS&#39;) and status = &#39;UNUSABLE&#39; order by index_name, partition_name, subpartition_name, tablespace_name;<br />\r\nspool off<br />\r\nEOF</code></p>\r\n\r\n<p><code># Rebuild Indexes &amp; Gather Table statistics<br />\r\nsqlplus -s / as sysdba&lt;&lt;EOF<br />\r\nset time on<br />\r\nset timing on<br />\r\nset echo on<br />\r\n@rebuild_schema_indexes.sql<br />\r\nexec dbms_stats.gather_table_stats(&#39;schema&#39;, &#39;ORDERS&#39;, DEGREE =&gt; 8, CASCADE =&gt; TRUE);<br />\r\nEOF</code></p>\r\n</div>", "created": "2023-02-17T20:40:14.364Z", "updated": "2023-02-17T20:42:32.396Z", "is_approved": true, "cover_image_url": null, "cover_image_file": "/static/images/random/sticky-notes.jpg", "tag": [3, 4, 6, 7, 13, 14, 18], "likes": []}}, {"model": "blog.post", "pk": 18, "fields": {"title": "Jira Development & Administration", "slug": "jira-development-administration", "author": 1, "summary": "Full stack Jira Development", "body": "<div class=\"container-fluid text-center border\" id=\"\">\r\n    <br>\r\n  \r\n    <br>  \r\n    <div class=\"row \">\r\n        <h3>Jira Development & Administration</h3>\r\n        <p>Full stack Jira Development</p>\r\n        <small>\r\n        <Ul class=\"col-6 list-group list-group-flush mx-auto\">\r\n            <li class=\"list-group-item\">Custom Application development using Jira Service Management.</li>\r\n            <li class=\"list-group-item\">Dynamic & Conditional, User interactive Forms.</li>\r\n            <li class=\"list-group-item\">External data sources like Databases, REST API linked Custom fields.</li>\r\n            <li class=\"list-group-item\">Fully automated business logic implementation.</li>\r\n            <li class=\"list-group-item\">User Onboarding & Management, Finance, ITIL/ITSM, Monitoring, Ticketing Application development.</li>\r\n            <li class=\"list-group-item\">External & Internal CRM, Customer Relationship Management Application.</li>\r\n            <li class=\"list-group-item\">Reports & Interactive Dashboards, integration with PowerBI, Data visualization.</li>\r\n            <li class=\"list-group-item\">Automatic Access request approval system.</li>\r\n            <li class=\"list-group-item\">Integration with Microsoft Teams, Slack, Jira Bot development</li>\r\n            <li class=\"list-group-item\">3rd Party software & application integrations using</li>\r\n            <li class=\"list-group-item\">Infrastructure & Cloud integrations using Python, Bash, Powershell Scripts & REST API.</li>\r\n            <li class=\"list-group-item\">Advanced automations using GitHub-Actions, AWS Lambda, GCP & Azure Functions</li>\r\n            <li class=\"list-group-item\">Asset Management & continuous integrations with IT assets & infrastructre.</li>\r\n            <li class=\"list-group-item\">Single Sign On (SSO), OAuth2 login Authentication integration using Okta, Microsoft and other SAML providers.</li>\r\n            <li class=\"list-group-item\">Custom Email notification HTML templates with issue data.</li>\r\n            <li class=\"list-group-item\">Jira Cloud Administration</li>\r\n            <li class=\"list-group-item\">Jira Data Center Installation, multi node load balancing using NGINX, server & database administration.</li>\r\n        </Ul></small>\r\n    </div>        \r\n\r\n    <br>\r\n    <br>\r\n\r\n    <div class=\"row justify-content-center align-items-center m-2 p-2\"> \r\n        <div class=\"col-md-6\">\r\n            <img class=\"img-fluid rounded border\" src=\"https://i.ibb.co/XS0zTSb/dynamic-forms.gif\" style=\"max-width:40vw; max-height:60vh\"> \r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <h3>Dynamic Forms</h3>            \r\n            <p>Dynamic & Interactive Requsest Forms, Change request forms based on user interaction, Make questions dynamic based on customer questionnaires. Ask user direct specific questions related to incident. Highly progmatic.</p>     \r\n        </div>  \r\n    </div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <div class=\"row justify-content-center align-items-center m-2 p-2\">\r\n        <div class=\"col-md-6\">\r\n            <h3>Complex Workflows</h3>\r\n            <p>Implement any business logic with Workflows and fully automated decisions with Approvals. Make best use of custom triggers, Validators, Conditions & Post functions in Jira workflows to acheive 100% automation without any extra cost.</p>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <img class=\"img-fluid rounded\" src=\"https://i.ibb.co/VDGSBPZ/Approval-workflow.jpg\">    \r\n        </div>\r\n    </div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <div class=\"row justify-content-center align-items-center m-2 p-2\">\r\n        <div class=\"col-md-6\">\r\n            <img class=\"img-fluid rounded\" src=\"https://i.ibb.co/HH0ygjg/html-email-template.jpg\" style=\"max-width:30vw\">    \r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <h3>HTML Email Templates</h3>\r\n            <p>Design Custom Email HTML Templates</p>\r\n            <p>Design look & feel, send only desired data users in html templates</p>\r\n        </div>    \r\n    </div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <div class=\"row justify-content-center align-items-center m-2 p-2\">\r\n        <div class=\"col-md-6\">\r\n            <h3>Data Center Installation</h3>\r\n           <small><ul class=\"list-group list-group-flush mx-auto col-6\">\r\n            <li class=\"list-group-item\">Linux & Windows Server</li>\r\n            <li class=\"list-group-item\">Multi Node installation</li>\r\n            <li class=\"list-group-item\">Load Balancing using NGINX</li>\r\n            <li class=\"list-group-item\">Reverse Proxy, SSL Termination</li>\r\n            <li class=\"list-group-item\">Dedicated REST API Traffic</li>\r\n            <li class=\"list-group-item\">MySQL, Postgres, Oracle, SQL Server Database & Server administration</li>\r\n            <li class=\"list-group-item\">Automated Backups</li>\r\n            <li class=\"list-group-item\">LDAP & AD integration</li>\r\n           </ul></small>\r\n        </div>  \r\n\r\n        <div class=\"col-md-6\">\r\n            <img class=\"img-fluid rounded\" src=\"https://i.ibb.co/8KPGQ9s/JIRAData-Center-4-node-architecture-diagram.png\" style=\"max-width:30vw\">    \r\n        </div> \r\n    </div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n</div>", "created": "2023-02-27T14:07:49.840Z", "updated": "2023-03-04T13:40:32.655Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/z8zjDFT/jira-integration.png", "cover_image_file": null, "tag": [28], "likes": []}}, {"model": "blog.post", "pk": 19, "fields": {"title": "Deploy Python/Django app as Docker container on fly.io's Public Cloud", "slug": "deploy-pythondjango-app-as-docker-container-on-fl", "author": 1, "summary": "Deploy a full stack Python Django application as a Docker container image on fly.io Platform as a Service (PaaS) Public Cloud .\r\nConnect a Postgres Database running on Fly.io to Django app.", "body": "<p>Fly Cloud transforms docker container images into and run as Firecracker (open source virtualization technology) micro-VM on bare metal servers across Data centers.</p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h5>Step 1:&nbsp; Install flyctl</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>#Linux<br />\r\ncurl -L https://fly.io/install.sh | sh<br />\r\n<br />\r\n#Mac<br />\r\nbrew install flyctl<br />\r\n<br />\r\n#Windows<br />\r\npowershell -Command &quot;iwr https://fly.io/install.ps1 -useb | iex&quot;</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Step 2:&nbsp; Change directory to Django project</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>cd django-project-directory</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Step 3:&nbsp; Copy Python Package dependency list to requirements.txt</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>pip freeze &gt; requirements.txt</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Step 4:&nbsp;&nbsp;&nbsp; Configure Django app with flyctl launch</h5>\r\n\r\n<p><em><strong>fly launch</strong></em></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>&gt;fly launch<br />\r\nUpdate available 0.0.442 -&gt; v0.0.472.<br />\r\nRun &quot;fly.exe version update&quot; to upgrade.<br />\r\nCreating app in C:\\Softwares\\django\\app\\aashutosh<br />\r\nScanning source code<br />\r\nDetected a Django app<br />\r\n? Overwrite &quot;C:\\Softwares\\django\\app\\aashutosh\\.dockerignore&quot;? Yes<br />\r\n? Overwrite &quot;C:\\Softwares\\django\\app\\aashutosh\\Dockerfile&quot;? No<br />\r\n? Choose an app name (leave blank to generate one): aashutosh<br />\r\nautomatically selected personal organization: Aashutosh Kumar<br />\r\n? Choose a region for deployment: Hong Kong, Hong Kong (hkg)<br />\r\nCreated app quasartech in organization personal<br />\r\nAdmin URL: https://fly.io/apps/aashutosh<br />\r\nHostname: aashutosh.fly.dev<br />\r\nSet secrets on aashutosh: SECRET_KEY<br />\r\nCreating database migrations<br />\r\nWrote config file fly.toml<br />\r\n? Would you like to set up a Postgresql database now? No<br />\r\n? Would you like to set up an Upstash Redis database now? No</code></div>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>Your Django app is almost ready to deploy!<br />\r\nWe recommend using the database_url(pip install dj-database-url) to parse the DATABASE_URL from os.environ[&#39;DATABASE_URL&#39;]<br />\r\nFor detailed documentation, see https://fly.dev/docs/django/</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><em><strong>fly launch</strong></em> scan &amp; detect source code automatically as a Djnago app and create two files with settings configured for deploying Djangi application:&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>fly.toml&nbsp;</strong> : contains configuration details like below to run as Django app on container/Micro VM, modify it suit your needs, but it comes with default setting required to deploy Django app.&nbsp;</p>\r\n\t</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li>fly app name,</li>\r\n\t<li>port details and other</li>\r\n\t<li>release management command</li>\r\n\t<li>\r\n\t<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>app = &quot;aashutosh&quot;<br />\r\n\tkill_signal = &quot;SIGINT&quot;<br />\r\n\tkill_timeout = 5<br />\r\n\tprocesses = []<br />\r\n\t[deploy]<br />\r\n\t&nbsp; release_command = &quot;python manage.py migrate&quot;<br />\r\n\t[env]<br />\r\n\t&nbsp; PORT = &quot;8000&quot;<br />\r\n\t[experimental]<br />\r\n\t&nbsp; auto_rollback = true<br />\r\n\t[[services]]<br />\r\n\t&nbsp; http_checks = []<br />\r\n\t&nbsp; internal_port = 8000<br />\r\n\t&nbsp; processes = [&quot;app&quot;]<br />\r\n\t&nbsp; protocol = &quot;tcp&quot;<br />\r\n\t&nbsp; script_checks = []<br />\r\n\t&nbsp; [services.concurrency]<br />\r\n\t&nbsp; &nbsp; hard_limit = 25<br />\r\n\t&nbsp; &nbsp; soft_limit = 20<br />\r\n\t&nbsp; &nbsp; type = &quot;connections&quot;<br />\r\n\t&nbsp; [[services.ports]]<br />\r\n\t&nbsp; &nbsp; force_https = true<br />\r\n\t&nbsp; &nbsp; handlers = [&quot;http&quot;]<br />\r\n\t&nbsp; &nbsp; port = 80<br />\r\n\t&nbsp; [[services.ports]]<br />\r\n\t&nbsp; &nbsp; handlers = [&quot;tls&quot;, &quot;http&quot;]<br />\r\n\t&nbsp; &nbsp; port = 443<br />\r\n\t&nbsp; [[services.tcp_checks]]<br />\r\n\t&nbsp; &nbsp; grace_period = &quot;1s&quot;<br />\r\n\t&nbsp; &nbsp; interval = &quot;15s&quot;<br />\r\n\t&nbsp; &nbsp; restart_limit = 0<br />\r\n\t&nbsp; &nbsp; timeout = &quot;2s&quot;<br />\r\n\t[[statics]]<br />\r\n\t&nbsp; guest_path = &quot;/app/public&quot;<br />\r\n\t&nbsp; url_prefix = &quot;/static/&quot;</code></div>\r\n\t</li>\r\n</ul>\r\n\r\n<ol start=\"2\">\r\n\t<li>\r\n\t<h5><strong>Dockerfile</strong></h5>\r\n\t</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li>Steps to deploy Django app as Container Image</li>\r\n\t<li>Replace Dockerfile CMD command with actual Django project wsgi file</li>\r\n\t<li>\r\n\t<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code># replace demo.wsgi with &lt;project_name&gt;.wsgi<br />\r\n\tCMD [&quot;gunicorn&quot;, &quot;--bind&quot;, &quot;:8000&quot;, &quot;--workers&quot;, &quot;2&quot;, &quot;core.wsgi&quot;]</code></div>\r\n\t</li>\r\n\t<li><br />\r\n\tDockerfile</li>\r\n\t<li>\r\n\t<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>ARG PYTHON_VERSION=3.10-slim-buster<br />\r\n\tFROM python:${PYTHON_VERSION}<br />\r\n\tENV PYTHONDONTWRITEBYTECODE 1<br />\r\n\tENV PYTHONUNBUFFERED 1<br />\r\n\t<br />\r\n\tRUN mkdir -p /code<br />\r\n\tWORKDIR /code<br />\r\n\tCOPY requirements.txt /tmp/requirements.txt<br />\r\n\t<br />\r\n\tRUN apt-get update<br />\r\n\t<br />\r\n\t#&nbsp;Install psycopg2 dependency -&nbsp;libpq-dev, gcc<br />\r\n\tRUN apt-get -y install libpq-dev gcc<br />\r\n\tRUN set -ex &amp;&amp; \\<br />\r\n\t&nbsp; &nbsp; pip install --upgrade pip &amp;&amp; \\<br />\r\n\t&nbsp; &nbsp; pip install -r /tmp/requirements.txt &amp;&amp; \\<br />\r\n\t&nbsp; &nbsp; rm -rf /root/.cache/<br />\r\n\t<br />\r\n\t# Copy Local Source code to image:/code<br />\r\n\tCOPY . /code/<br />\r\n\t<br />\r\n\t# Copy certificate files<br />\r\n\t# RUN mkdir ~/.postgresql/root.crt<br />\r\n\t# COPY cockroach_db/root.crt ~/.postgresql/root.crt<br />\r\n\t<br />\r\n\tRUN python manage.py collectstatic --noinput<br />\r\n\tEXPOSE 8000<br />\r\n\t<br />\r\n\t# replace demo.wsgi with &lt;project_name&gt;.wsgi<br />\r\n\tCMD [&quot;gunicorn&quot;, &quot;--bind&quot;, &quot;:8000&quot;, &quot;--workers&quot;, &quot;2&quot;, &quot;core.wsgi&quot;</code></div>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5>Step 5: Deploy App</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>flyctl deploy</code></div>\r\n\r\n<p>fly deploy will build the image from Dockerfile and push it on Fly.io</p>\r\n\r\n<p>Deploy Django app using fly deploy, this command will build the image using information/steps from Dockerfile, and will push the image to Fly.io and run the application using settings from fly.toml</p>\r\n\r\n<p>Once deployment is successful, Django app can be accessed online</p>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5>Step 6: Open App</h5>\r\n\r\n<p>Browse to <em>https://your-app-name.fly.dev/&nbsp; (https://aashutosh.fly.dev/)</em><br />\r\nuse fly open command to launch browser to&nbsp;https://your-app-name.fly.dev/&nbsp;</p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>fly open</code></div>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5>Step 7: Attach a Postgres Database to Django application on Fly.io</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>flyctl&nbsp;postgres attach --app &lt;<em>your-app-name</em>&gt; &lt;postgres-db-name&gt;<br />\r\nflyctl postgres attach --app aashutosh aashu-postgres</code></div>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h5>Step 8: ssh into Fly app instance console</h5>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>flyctl ssh console</code></div>", "created": "2023-03-07T20:51:19.111Z", "updated": "2023-03-09T12:41:10.825Z", "is_approved": true, "cover_image_url": "https://i.ibb.co/9wS1pLx/flyctl.jpg", "cover_image_file": "/static/images/random/tiles.e4a0bca4c492.jpg", "tag": [1, 2, 19, 20, 27], "likes": []}}]